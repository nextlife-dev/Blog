---
title: 기본적인 코드 문법 이해
description: 
aliases:
  - Seungwoo Ham
tags:
  - document
date: 2025-01-17
---

```cpp
#include <iostream>
//#include <cstdio> //cstyle
using namespace std;

int main(){
  cout << "Hello, World!" << endl;
  //printf("Hello, World!\n"); //cstyle

  return 0;
}
```

## 전처리 지시자

C++에서 함수를 사용하고자 한다면 **반드시 그 함수의 원형을 미리 정의하여야 합니다**

하지만 `cout`를 정의하지 않았는데도 사용할 수 있는 이유는 `#include <iostream>` 전처리 지시자 덕분입니다.

전처리 지시자는 컴파일 단계에서 코드를 변형하는 특수 명령어이며,

라이브러리와 모듈 같은 집합이나 단위가 아니라, **컴파일러가 코드를 분석하기 전에 실행됩니다.** 즉, 실제 코드 실행과는 별개로 작동되며, 코드의 구조나 동작을 변경하는 역할을 합니다.

만약 전처리 지시자를 사용하지 않으면, `cout`, `endl`과 같은 표준 라이브러리 요소들을 일반적인 함수처럼 정의하고 사용하는 것은 불가능합니다.

## 네임스페이스

이름 충돌을 방지하기 위해 코드를 논리적으로 분류하는 공간입니다.

`std` 네임스페이스는 C++ 표준 라이브러리에 속한 요소들을 포함합니다: `cout`, `cin`, `string` …

`using namespace std;`를 사용하면 `std::` 접두사 없이도 `std` 네임스페이스의 요소들을 직접 사용할 수 있습니다:

```cpp
// using namespace std; 를 사용하는 경우 
cout << "Hello, world!" << endl; 

// using namespace std; 를 사용하지 않는 경우 
std::cout << "Hello, world!" << std::endl;
```

일반적으로는 `using namespace std;` 대신 필요한 요소만 명시적으로 사용하도록 하는 것이 좋습니다. 만약 사용자가 정의한 함수나 변수의 이름이 `std` 네임스페이스에 있는 요소와 동일하다면, **컴파일 오류가 발생할 수 있기 때문입니다.**
